Objects in JavaScript

A JavaScript object is like a real-world entity having state and behaviour, for example, a car. We can take a car as an object. It will have a state like colour and model. It will also have behaviours like accelerating and brake. There are many built in objects inside JavaScript but before discussing about that first let’s create our own objects it will help us understand about different types of objects in JavaScript. Let’s look at the code below:

let name01 = "Daniel";
let car01 = "Mercedes";
let age01 = 27;

let name02 = "John";
let car02 = "Toyota";
let age02 = 35;

let name01 = "Jane";
let car01 = "Ferrari";
let age01 = 47;

let updateAge = function(age) {
    return ++age;
}

The above code will work perfectly fine but the problem is that it's messy. What we have here is a bunch of people with some information about them like there car brand and their ages. But if you look at the code it has a lot of variables and the code is repetitive because the same type of variables is being declared for each person which is unnecessary. While writing code we have to follow a principle of DRY (Don’t Repeat Yourself) which means not to write the same type of code again and again in a program. Also, it is not ideal if we had to create many more for E.g., writing instances of this data for a 100 people of this specific information here.

What we can instead use objects here which will also have exact same information here but in a more organised and efficient way.

Let’s create an object in a shorthand way:
function Person(name, car, age) {
    this.name = name;
    this.car = car;
    this.age = age;
    this.updateAge = function () {
        return ++this.age;
    }
}

let person01 = new Person("Daniel", "Mercedes", 27);
let person02 = new Person("John", "Toyota", 35);
let person03 = new Person("Jane", "Ferari", 47);

console.log(person01, person02, person03)

Now this code is shorter and more readable.
To put it simply, what we have done in above code, is that we have created a blueprint of the information inside a function. This function will store our object blueprint. Then we can use constructor to pass in each individual’s details. 

This object blueprint has placeholders such as name, car and age. These placeholders will catch whatever details we pass in through the constructor and it will run it through the object called Person which will convert the details in a key-value pair. The constructor then will store the key-value pair in separate variables which in this case is person01, person02 and person03.

To access the data, we can console.log the variables and it will give us the output as below:

Person {
  name: 'Daniel',
  car: 'Mercedes',
  age: 27,
  updateAge: [Function (anonymous)]
} Person {
  name: 'John',
  car: 'Toyota',
  age: 35,
  updateAge: [Function (anonymous)]
} Person {
  name: 'Jane',
  car: 'Ferari',
  age: 47,
  updateAge: [Function (anonymous)]
}


We also have a function inside the object which can be accessed as follows to update the age if we want:

console.log(person01.updateAge()) --> This will increase age of person01 from 27 to 28


A JavaScript object has properties associated with it. A property of an object can be explained as a variable that is attached to the object. Object properties are basically the same as ordinary JavaScript variables, except for the attachment to objects. The properties of an object define the characteristics of the object. We can access the properties of an object with a simple dot-notation: objectName.propertyName
In our case to access the car property of person object we use the following code:


console.log(person01.car)
[Running] node "c:\Users\akara\Documents\GUVI\test.js"
Mercedes

Similarly, we can access any property of any object we want.


There is one more way of creating an object in JavaScript which is object literal:

let person = {
    name: "Daniel",
    car: "Mercedes",
    age: 27,
    updateAge: function(){
        return ++person.age;
    }
}
let person01 = {
    name: "John",
    car: "Toyota",
    age: 35,
    updateAge: function(){
        return ++person.age;
    }
}
let person02 = {
    name: "Jane",
    car: "Ferrari",
    age: 47,
    updateAge: function(){
        return ++person.age;
    }
}

But using the object literal in this case is not a shorter version and it is also not ideal if we have 100’s or 1000’s of instances to create.


Now, look at the below code:
let name = "Daniel"
console.log(name.length)

Here, .length is a built in property inside JavaScript. It belongs to the String global object inside JavaScript. Similarly we have a whole bunch of JavaScript objects For E.g. parseInt(), Array, Map, Set, BigInt etc.. All these built-in objects contain built-in properties and methods which can be used in any program.

Summary:

JavaScript is an object-oriented programming language, so everything in JavaScript is an object. A JavaScript object is like a real-world entity having state and behaviour, for example, a car. We can take a ‘laptop’ as an object. It will have attributes like ‘brand’, ‘chipset’, ‘Year of Manufacture’ etc. It will also have behaviours like ‘switch on’ and ‘switch off’.

So, the object has properties and methods. In this case laptop object has properties such as brand, chipset, year of manufacture and methods like switch on and switch of. But the property value differs from laptop to laptop and these values are stored in key-value pairs.

JavaScript is template based and we can create objects without the need of having a class. Generally, an object is accompanied by a class that defines an object’s blueprints but JavaScript doesn’t require any class to be defined for objects

So, this is how an object is internally represented in JavaScript.
